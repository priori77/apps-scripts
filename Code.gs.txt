// 설정 값
const SLACK_WEBHOOK_URL = 'url'; // Slack Webhook URL
const SPREADSHEET_ID = 'id'; // 스프레드시트 ID
const SHEET_NAME = 'M15 Test Report'; // 시트 이름
const SLACK_BOT_TOKEN = 'token'; // Slack Bot Token (slash command용)

// 메인 함수

// 매일 오전 8시 자동 실행 함수
function sendDailyReport() {
  try {
    const currentData = getTestData();  
    const previousData = getPreviousData();
    const comparison = compareData(currentData, previousData);
    
    // 현재 데이터 저장 (다음날 비교용)
    saveTodayData(currentData);
    
    // Slack 메시지 생성 및 전송
    const message = createSlackMessage(currentData, comparison);
    sendToSlack(message);
    
    console.log('Daily report sent successfully');
  } catch (error) {
    console.error('Error sending daily report:', error);
    sendErrorToSlack(error);
  }
}

// 테스트 데이터 가져오기
 
function getTestData() {
  const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
  const sheet = ss.getSheetByName(SHEET_NAME);
  
  // F20:J29 범위에서 데이터 가져오기 (실제 집계 데이터 위치)
  const dataRange = sheet.getRange('C20:K29');
  const values = dataRange.getValues();
  
  const data = {
    timestamp: new Date(),
    categories: [],
    total: {
      tests: 0,
      pass: 0,
      fail: 0,
      blocked: 0,
      na: 0,
      nt: 0,
      passRate: 0
    }
  };
  
  // 각 카테고리별 데이터 파싱
  values.forEach((row, index) => {
    if (row[0] && row[0] !== '') { // 카테고리명이 있는 경우
      const category = {
        name: row[0],
        total: row[1] || 0,
        coverage: row[2] || 0,
        pass: row[3] || 0,
        fail: row[4] || 0,
        blocked: row[5] || 0,
        na: row[6] || 0,
        nt: row[7] || 0,
        passRate: row[8] || 0
      };
      
      data.categories.push(category);
      
      // 전체 합계 계산
      data.total.tests += Number(category.total) || 0;
      data.total.pass += Number(category.pass) || 0;
      data.total.fail += Number(category.fail) || 0;
      data.total.blocked += Number(category.blocked) || 0;
      data.total.na += Number(category.na) || 0;
      data.total.nt += Number(category.nt) || 0;
    }
  });
  
  // Pass Rate 계산
  if (data.total.tests > 0) {
    data.total.passRate = ((data.total.pass / data.total.tests) * 100).toFixed(2);
  }
  
  // Build 정보 가져오기
  data.buildInfo = sheet.getRange('D10').getValue(); // Build Info
  data.deploymentDate = sheet.getRange('D12').getValue(); // Deployment Date
  data.qaLead = sheet.getRange('D13').getValue(); // QA Lead
  
  return data;
}

// 이전 데이터 가져오기 (Properties Service 사용)
function getPreviousData() {
  const scriptProperties = PropertiesService.getScriptProperties();
  const previousDataJson = scriptProperties.getProperty('previousTestData');
  
  if (previousDataJson) {
    return JSON.parse(previousDataJson);
  }
  
  return null;
}

// 오늘 데이터 저장
function saveTodayData(data) {
  const scriptProperties = PropertiesService.getScriptProperties();
  scriptProperties.setProperty('previousTestData', JSON.stringify(data));
}

// 데이터 비교
function compareData(current, previous) {
  if (!previous) {
    return null;
  }
  
  return {
    totalDiff: current.total.tests - previous.total.tests,
    passDiff: current.total.pass - previous.total.pass,
    failDiff: current.total.fail - previous.total.fail,
    blockedDiff: current.total.blocked - previous.total.blocked,
    naDiff: current.total.na - previous.total.na,
    ntDiff: current.total.nt - previous.total.nt,
    passRateDiff: (parseFloat(current.total.passRate) - parseFloat(previous.total.passRate)).toFixed(2)
  };
}

// Slack 메시지 생성
function createSlackMessage(data, comparison) {
  const kstDate = Utilities.formatDate(new Date(), 'Asia/Seoul', 'yyyy-MM-dd HH:mm');
  
  // 이모지 설정
  const getEmoji = (value) => {
    if (value > 0) return '📈';
    if (value < 0) return '📉';
    return '➖';
  };
  
  const getStatusEmoji = (passRate) => {
    if (passRate >= 95) return '🟢';
    if (passRate >= 80) return '🟡';
    return '🔴';
  };
  
  // 기본 메시지 블록
  const blocks = [
    {
      type: 'header',
      text: {
        type: 'plain_text',
        text: '🧪 M15 Daily Test Report',
        emoji: true
      }
    },
    {
      type: 'context',
      elements: [
        {
          type: 'mrkdwn',
          text: `📅 *${kstDate} (KST)* | Build: *${data.buildInfo}*`
        }
      ]
    },
    {
      type: 'divider'
    },
    {
      type: 'section',
      fields: [
        {
          type: 'mrkdwn',
          text: `*Total Tests*\n${data.total.tests}`
        },
        {
          type: 'mrkdwn',
          text: `*Pass Rate* ${getStatusEmoji(data.total.passRate)}\n${data.total.passRate}%`
        }
      ]
    },
    {
      type: 'section',
      fields: [
        {
          type: 'mrkdwn',
          text: `✅ *Pass:* ${data.total.pass}`
        },
        {
          type: 'mrkdwn',
          text: `❌ *Fail:* ${data.total.fail}`
        },
        {
          type: 'mrkdwn',
          text: `⚠️ *Blocked:* ${data.total.blocked}`
        },
        {
          type: 'mrkdwn',
          text: `⏭️ *N/A:* ${data.total.na}`
        },
        {
          type: 'mrkdwn',
          text: `🚫 *N/T:* ${data.total.nt}`
        },
        {
          type: 'mrkdwn',
          text: ' '
        }
      ]
    }
  ];
  
  // 전날 대비 변화 추가
  if (comparison) {
    const changeText = [];
    
    if (comparison.totalDiff !== 0) {
      changeText.push(`• Total: ${comparison.totalDiff > 0 ? '+' : ''}${comparison.totalDiff} ${getEmoji(comparison.totalDiff)}`);
    }
    if (comparison.passDiff !== 0) {
      changeText.push(`• Pass: ${comparison.passDiff > 0 ? '+' : ''}${comparison.passDiff} ${getEmoji(comparison.passDiff)}`);
    }
    if (comparison.failDiff !== 0) {
      changeText.push(`• Fail: ${comparison.failDiff > 0 ? '+' : ''}${comparison.failDiff} ${getEmoji(-comparison.failDiff)}`);
    }
    if (comparison.passRateDiff != 0) {
      changeText.push(`• Pass Rate: ${comparison.passRateDiff > 0 ? '+' : ''}${comparison.passRateDiff}% ${getEmoji(comparison.passRateDiff)}`);
    }
    
    if (changeText.length > 0) {
      blocks.push({
        type: 'divider'
      });
      blocks.push({
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: `*📊 Changes from Yesterday*\n${changeText.join('\n')}`
        }
      });
    }
  }
  
  // 카테고리별 상세 정보
  if (data.categories.length > 0) {
    blocks.push({
      type: 'divider'
    });
    
    let categoryText = '*📋 Category Details*\n```\n';
    categoryText += 'Category         | Total | Pass | Fail | Pass Rate\n';
    categoryText += '-----------------|-------|------|------|----------\n';
    
    data.categories.forEach(cat => {
      const name = (cat.name + '                ').substring(0, 16);
      const total = (cat.total + '       ').substring(0, 5);
      const pass = (cat.pass + '      ').substring(0, 4);
      const fail = (cat.fail + '      ').substring(0, 4);
      const passRate = cat.passRate ? `${(cat.passRate * 100).toFixed(1)}%` : '0.0%';
      
      categoryText += `${name} | ${total} | ${pass} | ${fail} | ${passRate}\n`;
    });
    categoryText += '```';
    
    blocks.push({
      type: 'section',
      text: {
        type: 'mrkdwn',
        text: categoryText
      }
    });
  }
  
  // Footer
  blocks.push({
    type: 'context',
    elements: [
      {
        type: 'mrkdwn',
        text: `QA Lead: *${data.qaLead}* | <https://docs.google.com/spreadsheets/d/${SPREADSHEET_ID}|View Spreadsheet>`
      }
    ]
  });
  
  return { blocks: blocks };
}

// Slack으로 메시지 전송
function sendToSlack(message) {
  const options = {
    method: 'post',
    contentType: 'application/json',
    payload: JSON.stringify(message)
  };
  
  UrlFetchApp.fetch(SLACK_WEBHOOK_URL, options);
}

// 에러 메시지 전송
function sendErrorToSlack(error) {
  const message = {
    blocks: [
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: `⚠️ *Error in Test Report*\n\`\`\`${error.toString()}\`\`\``
        }
      }
    ]
  };
  
  sendToSlack(message);
}

// 수동 테스트 함수
function testSendReport() {
  sendDailyReport();
}